# This program is the OpenXT git fetcher. It's a simple twisted
# application that periodically polls the specified git repos.
# Copyright (C) 2014  Philip Tricca <flihp@twobit.us>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
"""
This tac file defines an application that periodically fetches a collection of
git repos.
"""

from __future__ import print_function

import os, subprocess, sys
from ConfigParser import ConfigParser
from twisted.application import service, internet
from twisted.python.log import ILogObserver, FileLogObserver
from twisted.python.logfile import DailyLogFile

class GitFetcher(object):
    """ Class to fetch git repos
    """

    def __init__(self, repo_url = None, basedir = "/tmp"):
        self.repo_url = repo_url
        self.basedir = basedir
        self.repo_name = self.repo_url.split("/")[-1]
        self.repo_path = self.basedir + "/" + self.repo_name
        # cloning bare repos adds '.git' to end of directory name even if URI
        # doesn't have one
        if self.repo_path[-4:] != '.git':
            self.repo_path = self.repo_path + '.git'

    def poll(self):
        if self.repo_url is not None:
            print("fetching repo {0} from URL {1} into {2}".format(self.repo_name, self.repo_url, self.repo_path))
            try:
                if not os.path.exists(self.repo_path):
                    os.chdir(self.basedir)
                    subprocess.check_output(["git", "clone", "--bare",
                                            self.repo_url],
                                            stderr=subprocess.STDOUT)
                elif os.path.isdir(self.repo_path):
                    os.chdir(self.repo_path)
                    subprocess.check_output(["git", "fetch"],
                                            stderr=subprocess.STDOUT)
                    os.chdir(self.basedir)
                else:
                    print("{0} exists but isn't a directory, bad news".format(self.repo_path))
            except subprocess.CalledProcessError, e:
               print("{0}".format(e))
            print("success polling repo: {0}".format(self.repo_url))
        else:
            print("no repo url set, nothing to poll")

def fetcher_from_gitrepo (config, section):
    if not config.has_option (section, 'basedir'):
        sys.exit ('No "basedir" specified. Unable to checkout repo from section: {0}'.format (section))
    basedir = config.get (section, 'basedir')
    if not config.has_option (section, 'url'):
        sys.exit ('Git repo section {0} missing required option "url"\n'.format (section))
    url = config.get (section, 'url')
    logfile.write ("Creating fetcher for git repo named {0} with url {1}\n".format (section, url))
    if config.has_option (section, 'subdir'):
        destdir = basedir + config.get (section, 'subdir')
    else:
        destdir = basedir
    if not os.path.lexists (destdir):
        os.mkdir (destdir)
    elif not os.path.isdir (destdir):
        sys.exit ("Requested directory in section {0} exists but isn't a directory.\n".format (section))
    return GitFetcher (url, destdir)
 
# get application config values
config = ConfigParser ()
config.read ("@CONFFILE@")
basedir = config.get ("DEFAULT", "basedir")
logdir = config.get ("DEFAULT", "logdir")
logfile = config.get ("DEFAULT", "logfile")
# use eval here to allow intervals like 60*5 to get 5 minutes
poll_interval = float (eval (config.get ("DEFAULT", "poll-interval")))

logfile = DailyLogFile(logfile, logdir)
application = service.Application("OpenXT Git Poller")
application.setComponent(ILogObserver, FileLogObserver(logfile).emit)

os.chdir(basedir)
# Iterate over repos from config file
# For each: create GitFetcher that will poll on top level interval
for section in config.sections ():
    type = config.get (section, 'type')
    if type == 'git':
        fetcher = fetcher_from_gitrepo (config, section)
    else:
        raise NotImplementedError ('Config section type {0} is not implemented.\n'.format (type))
    loopreact = internet.TimerService (step=poll_interval,
                                       callable=fetcher.poll)
    loopreact.setServiceParent (application)

