# This program is my git fetcher. It's a simple twisted
# application that periodically polls the specified git repos.
# Copyright (C) 2014  Philip Tricca <flihp@twobit.us>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
""" twobit git poller

This tac file defines an application that periodically fetches a
collection of git repos.  Repos are descriped in the accompanying INI-
style configuration file.
"""

from __future__ import print_function

import ast, sys
from ConfigParser import ConfigParser
from twisted.application import service, internet
from twisted.python.log import ILogObserver, FileLogObserver
from twisted.python.logfile import DailyLogFile
from twobit_gitpoller import GitFetcher, GitHubOrgFetcher, BuildbotHook

# get application config values
config = ConfigParser()
config.read('@CONFFILE@')
logdir = config.get('DEFAULT', 'logdir')
logfile = config.get('DEFAULT', 'logfile')
# conservative default polling interval
poll_interval_default = 1200

logfile = DailyLogFile(logfile, logdir)
application = service.Application('twobit Git Poller')
application.setComponent(ILogObserver, FileLogObserver(logfile).emit)

# Iterate over repos from config file
for section in config.sections():
    # Get config values, use defaults if necessary.
    config_dict = dict(config.items(section))
    if 'poll-interval' in config_dict:
        poll_interval = float(eval(config_dict['poll-interval']))
    else:
        poll_interval = poll_interval_default
    if not 'basedir' in config_dict:
        sys.exit('Required config item missing from org: basedir\n')
    basedir = config_dict['basedir']
    if 'subdir' in config_dict:
        destdir = basedir + '/' + config_dict['subdir']
    else:
        destdir = basedir
    if ('hook-script' in config_dict and 'hook-master' in config_dict and
        'hook-port' in config_dict and 'hook-user' in config_dict and
        'hook-passwd' in config_dict and 'hook-projects' in config_dict):
        # Get hook script data. Assume all data is required until we find
        # a counter example.
        bb_hook = BuildbotHook(
                      script=config_dict['hook-script'],
                      host=config_dict['hook-master'],
                      port=config_dict['hook-port'],
                      user=config_dict['hook-user'],
                      passwd=config_dict['hook-passwd'],
                      logfile=config_dict['hook-logfile'],
                      projects=ast.literal_eval(config_dict['hook-projects'])
                  )
    else:
        bb_hook = None

    # Create objects to fetch git stuff specific to 'type' from config.
    type = config.get(section, 'type')
    if type == 'git':
        if not 'url' in config_dict:
            sys.exit('Required section missing from git section: url\n')
        fetcher = GitFetcher(repo_url = config_dict['url'],
                             hook = bb_hook,
                             basedir = destdir)
    elif type == 'org':
        # sanity check GitHub org config
        if not 'name' in config_dict:
            sys.exit('Required section missing from org: name\n')
        # make the fetcher
        fetcher = GitHubOrgFetcher(application = application,
                                   orgname = config_dict ['name'],
                                   destdir = destdir,
                                   hook = bb_hook,
                                   poll_interval = poll_interval)
    else:
        raise NotImplementedError('Config section type {0} is not implemented.\n'.format(type))
    loopreact = internet.TimerService(step=poll_interval,
                                      callable=fetcher.poll)
    loopreact.setServiceParent(application)

